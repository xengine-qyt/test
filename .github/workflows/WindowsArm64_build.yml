name: Build ARM64 Module (Windows)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-arm64-windows:
    runs-on: windows-latest  # 运行在 Windows 最新版本 runner 上

    steps:
      - uses: actions/checkout@v3  # 检出代码

      - name: Install CMake  # 确保安装了 CMake (Windows runner 通常预装了 CMake)
        uses: lukka/get-cmake@latest # 使用 actions/get-cmake 安装或使用预装的 CMake
        with:
          cmakeVersion: '3.20' # 可以指定 CMake 版本，或使用 'latest'

      - name: Configure CMake for ARM64  # 配置 CMake 使用 Visual Studio ARM64 工具链
        shell: cmd  # 指定使用 cmd shell
        run: |
          mkdir build-arm64
          cd build-arm64
          cmake .. ^
            -G "Visual Studio 17 2022" ^  # 指定 Visual Studio 2022 生成器 (或更新的版本)
            -A arm64                    # 指定目标架构为 ARM64

      - name: Build ARM64 Module  # 使用 MSBuild 构建
        shell: cmd  # 指定使用 cmd shell
        run: |
          cd build-arm64
          msbuild YOUR_PROJECT.sln /p:Configuration=Release /p:Platform=arm64 # 使用 MSBuild 构建解决方案

      - name: Archive Module (Optional) # (可选) 归档模块
        if: ${{ success() }}
        shell: bash # 使用 bash shell (windows runner 也有 bash)
        run: |
          cd build-arm64/Release # 假设 Release 版本输出在此目录下，请根据实际情况调整
          tar czvf arm64-module.tar.gz <你的模块或目录> # 将 <你的模块或目录> 替换为实际的模块路径

      - name: Upload Artifact (Optional) # (可选) 上传构建产物
        if: ${{ success() }}
        uses: actions/upload-artifact@v3
        with:
          name: arm64-module-windows
          path: build-arm64/Release/arm64-module.tar.gz # 根据实际归档路径调整